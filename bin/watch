#!/usr/bin/env python3
import datetime
import os
import subprocess

from inotify.adapters import InotifyTree


def build_docs():
    subprocess.check_call("bin/build_docs")


def refresh_assets():
    subprocess.check_call(
        ["rsync", "-avr", "docs/_static/", "docs/_build/html/_static/"]
    )


def watch_for_changes(debug=False):
    i = InotifyTree("docs")

    IGNORED_EVENTS = ["IN_CLOSE_WRITE", "IN_CLOSE_NOWRITE", "IN_ACCESS", "IN_OPEN"]
    IGNORED_PATHS = ["docs/_build"]

    last_build = None

    for event in i.event_gen(yield_nones=False):
        (_, type_names, path, filename) = event

        ignore = False
        for ignored_event_type in IGNORED_EVENTS:
            if ignored_event_type in type_names:
                ignore = True
                break

        for ignored_path in IGNORED_PATHS:
            if path.startswith(ignored_path):
                ignore = True
                break

        if filename.endswith(".swx") or filename.endswith(".swp") or filename.endswith("~"):
            ignore = True

        if ignore:
            continue

        if last_build:
            # If build has been triggered in the last 50 ms, skip
            delta = (datetime.datetime.now() - last_build).microseconds / 1000
            if delta < 50:
                continue

        build_docs()
        refresh_assets()
        last_build = datetime.datetime.now()

        if debug:
            print(
                "PATH=[{}] FILENAME=[{}] EVENT_TYPES={}".format(
                    path, filename, type_names
                )
            )


if __name__ == "__main__":
    build_docs()
    refresh_assets()
    watch_for_changes()
